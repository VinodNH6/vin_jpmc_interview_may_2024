
import { createContext, useReducer } from 'react';
import { assetProp } from './types';
import { getAssetDataByAssetClass, getAssetDataByPrice, getAssetDataByTicker } from '../api/apiHelper';

interface stateInterface {
    assetsData: assetProp[]
}

interface ActionInterface {
    type: string,
    payload: assetProp[]
}


type StateContextType = {
    // state: assetProp[];
    state: stateInterface;
    // dispatch: React.Dispatch<React.SetStateAction<boolean>>;
    dispatch: React.Dispatch<ActionInterface>
};

interface StateContextInterface {
    // state: assetProp[];
    state: stateInterface;
    // dispatch: React.Dispatch<React.SetStateAction<boolean>>;
    dispatch: React.Dispatch<ActionInterface>
};

// export const AssetsContext = createContext("");  //ORIGINAL
// export const AssetsContext = createContext<null | StateContextType>(null);
// export const AssetsContext = createContext<StateContextType | null>(null);
// export const AssetsContext = createContext<null | StateContextInterface>(null);

export const AssetsContext = createContext<StateContextInterface>({
    state: {
        assetsData: []
    },
    dispatch: () => {},
  });



// interface stateInterface {
//     assetsData: assetProp[]
// }

// interface ActionInterface {
//     type: string,
//     payload: assetProp[]
// }

const reducer = (state: stateInterface, action: ActionInterface) => {
    if (action.type === 'normal') {
        return {
            assetsData: action.payload
        };
    }
    if (action.type === 'sort_by_assetClass') {
        const data = action.payload
        const newdata = getAssetDataByAssetClass(data)
        return {
            assetsData: newdata
        };
    }
    if (action.type === 'sort_by_price') {
        const data = action.payload
        const newdata = getAssetDataByPrice(data)
        return {
            assetsData: newdata
        };
    }
    if (action.type === 'sort_by_ticker') {
        const data = action.payload
        const newdata = getAssetDataByTicker(data)
        return {
            assetsData: newdata
        };
    }
    throw Error('Unknown action.');
}



interface ContextProviderProps {
    children: React.ReactNode;
};

const initialState = {
    assetsData: []
}

const AssetContextProvider = ({ children }: ContextProviderProps) => {
    // const [state, dispatch] = useReducer(reducer, { age: 42 });
    const [state, dispatch] = useReducer(reducer, initialState);

    return (
        <AssetsContext.Provider value={{ state, dispatch }}>
            {children}
        </AssetsContext.Provider>
    )
}

export default AssetContextProvider
